name: CD workflow

on:
  workflow_run:
    workflows: ["CI workflow"]   # <-- TÊN PHẢI ĐÚNG với name: trong ci.yml
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
        AWS_REGION: us-east-1
        CLUSTER_NAME: weather-app-cluster
        WEATHER_API: ${{ secrets.WEATHER_API }}
        GITHUB_SHA: ${{ github.sha }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name $CLUSTER_NAME

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Setup weather api authentication
        run: |
          kubectl create secret generic weather-secret \
            --from-literal=WEATHER_API=$WEATHER_API \
            --dry-run=client -o yaml | kubectl apply -f -

    #   - name: Helm upgrade --install
    #     run: |
    #       helm upgrade --install weather ./helm \
    #         --install \
    #         --atomic \
    #         --force \
    #         --namespace default \
    #         --set image.tag=$GITHUB_SHA \
    #         --create-namespace \
    #         --wait \
    #         --debug \
    #         --timeout 20m
      - name: Helm create
        run: |
            helm install weather ./helm \
                --namespace default \
                --create-namespace \
                --wait \
                --timeout 10m
            
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Get Backend External URL
        id: backend_ip
        run: |
          sleep 5
          BACKEND_HOST=$(kubectl get svc weather-backend-svc -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          echo "BACKEND_URL=http://$BACKEND_HOST:5000" >> "$GITHUB_ENV"
          echo "Backend URL: http://$BACKEND_HOST:5000"
      - name: Write VITE_API_URL to frontend/.env
        run: |
          echo "VITE_API_URL=$BACKEND_URL" > .env.production
          echo "VITE_API_URL=$BACKEND_URL" > frontend/.env
          cat frontend/.env

      - name: Rebuild Frontend with new API URL
        working-directory: frontend
        run: |
          npm ci
          npm run build
      - name: Get Frontend External URL
        id: frontend_ip
        run: |
          sleep 5
          FRONTEND_HOST=$(kubectl get svc weather-frontend-svc -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          echo "FRONTEND_URL=http://$FRONTEND_HOST" >> "$GITHUB_ENV"
          echo "Frontend URL: http://$FRONTEND_HOST"

      - name: Port-forward & Test Backend
        run: |
          sleep 5
          curl -s "$BACKEND_URL/weather?query=Hanoi" | tee result.json

          if grep -q "temp" result.json; then
            echo "Backend $GITHUB_SHA test passed"
          else
            echo "Backend $GITHUB_SHA test failed"
            exit 1
          fi

      - name: Port-forward & Test Frontend
        run: |
          sleep 5
          curl -s $FRONTEND_URL | grep -q "Weather Information" && echo "Frontend $GITHUB_SHA  test passed" || (echo "Frontend $GITHUB_SHA failed" && exit 1)
